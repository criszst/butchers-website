generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------->>> ENUMS

enum OrderStatus {
  Preparando
  Enviado
  Entregue
  Cancelado
}

enum PaymentStatus {
  Pendente
  Pago
  Cancelado
  Estornado
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   @db.Text
  isAdmin       Boolean   @default(false)
  bio           String?
  birthDate     String?
  phone         String?
  cpf           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  Order Order[]

  Address Address[]

  CartItem CartItem[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  
  price       Float
  priceWeightAmount Int?    //  500
  priceWeightUnit   String? // "g" ou "kg" 

  image       String?
  category    String
  discount    Float?   @default(0)
  stock       Int      @default(0)
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  

  CartItem CartItem[]
  ProductSupplier ProductSupplier[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id        String      @id @default(cuid())
  orderNumber String @unique @default(cuid())

  user      User        @relation(fields: [userId], references: [id])
  userId    String
  
  date      DateTime    @default(now())
  total     Float
  status    String      @default("Preparando")

  paymentMethod  String
  paymentStatus  PaymentStatus @default(Pendente)
  paymentDate    DateTime?

  estimatedDelivery DateTime?
  deliveryDate      DateTime?
  trackingCode      String?

  deliveryAddress String? @db.Text

  createdAt DateTime    @default(now())  
  updatedAt DateTime    @updatedAt
  
  items     OrderItem[]

}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  name     String
  quantity Int
  price    Float

  order    Order  @relation(fields: [orderId], references: [id])
  category String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CartItem {
  id         String @id @default(cuid())
  userId     String
  productId  Int
  quantity   Float
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, productId])
}


model Address {
  id          String   @id @default(cuid())
  userId      String

  name        String             // Nome do endereço, ex: "Casa", "Trabalho"
  street      String     @default("Desconhecido")
  number      String     @default("S/N")       
  complement  String?    @default("Desconhecido")        
  neighborhood String    @default("Desconhecido")        // Bairro
  city        String     @default("Desconhecida")        // Cidade
  state       String     @default("São Paulo")
  country     String   @default("Brasil") // País (default Brasil)
  cep         String   @default("00000-000")

  isDefault   Boolean  @default(false)

  user        User     @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PurchaseOrder {
  id          String   @id @default(cuid())
  supplierId  String
  orderNumber String   @unique @default(cuid())
  status      String   @default("Pendente") // Pendente, Enviado, Recebido, Cancelado
  total       Float
  orderDate   DateTime @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  supplier Supplier @relation(fields: [supplierId], references: [id])
  items    PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String  @id @default(cuid())
  purchaseOrderId String
  productName     String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  receivedQty     Int?    @default(0)

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
}


model Supplier {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  cnpj        String?  @unique
  contact     String?  // Nome do contato
  rating      Float?   @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ProductSupplier ProductSupplier[]
  PurchaseOrder   PurchaseOrder[]
}

model ProductSupplier {
  id         String   @id @default(cuid())
  productId  Int
  supplierId String
  price      Float    // Preço do fornecedor para este produto
  minOrder   Int?     // Quantidade mínima de pedido
  leadTime   Int?     // Tempo de entrega em dias
  isPreferred Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([productId, supplierId])
}

