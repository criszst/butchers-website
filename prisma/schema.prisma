generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   @db.Text
  isAdmin       Boolean   @default(false)
  bio           String?
  birthDate     String?
  phone         String?
  cpf           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  Order Order[]

  Address Address[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String?
  category    String
  discount    Float?   @default(0)
  stock       Int      @default(0)
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  date      DateTime    @default(now())
  total     Float
  status    String      @default("Preparando")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
  user      User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  name     String
  quantity Int
  price    Float
  order    Order  @relation(fields: [orderId], references: [id])
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  name      String
  address   String
  isDefault Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
}
